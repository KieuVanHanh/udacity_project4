name: Frontend Continuous Deployment

on:
  workflow_dispatch:
  push:
    branches: 
      - main
    paths:
      - 'starter/frontend/**'
  pull_request:
    branches: 
      - main
    paths:
      - 'starter/frontend/**'

jobs:
  lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: starter/frontend
    steps:
    - name: Check out repository
      uses: actions/checkout@v3

    - name: Use Node.js 
      uses: actions/setup-node@v3
      with:
        node-version: ${{env.NODE_VERSION}}
        cache: 'npm'
        cache-dependency-path: "starter/frontend/package-lock.json"

    - name: Lint job
      run: |
        npm ci
        npm run lint

  run-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: starter/frontend
    steps:
    - name: Check out repository
      uses: actions/checkout@v3

    - name: Use Node.js 
      uses: actions/setup-node@v3
      with:
        node-version: ${{env.NODE_VERSION}}
        cache: 'npm'
        cache-dependency-path: "starter/frontend/package-lock.json"

  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: starter/frontend
    needs: [lint, run-test]    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'v1.18.0'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
          aws-region: us-east-1

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: project4
          IMAGE_TAG: ${{ github.sha }}
          MOVIE_API_URL: ${{ secrets.REACT_APP_MOVIE_API_URL }}
          EKS_CLUSTER: project4
        run: |
          docker build -t --build-arg REACT_APP_MOVIE_API_URL=$MOVIE_API_URL $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          cd k8s
          aws eks update-kubeconfig --name $EKS_CLUSTER --region us-east-1
          kustomize edit set image frontend=$ECR_REPOSITORY:$IMAGE_TAG
          kustomize build | kubectl apply -f -
